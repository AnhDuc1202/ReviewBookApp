// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReviewBook.API.Data;

#nullable disable

namespace ReviewBook.API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220605201819_MyTagTableandrelationship")]
    partial class MyTagTableandrelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("ID_Role")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("bytea");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("ID");

                    b.HasIndex("ID_Role");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Stage_Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ID_Aut")
                        .HasColumnType("integer");

                    b.Property<int>("ID_Pub")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("bytea");

                    b.Property<int>("PublishedYear")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ID_Aut");

                    b.HasIndex("ID_Pub");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Book_Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ID_Book")
                        .HasColumnType("integer");

                    b.Property<int>("ID_Tag")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ID_Book");

                    b.HasIndex("ID_Tag");

                    b.ToTable("BookTags");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Follow", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ID_Follower")
                        .HasColumnType("integer");

                    b.Property<int>("ID_Following")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ID_Follower");

                    b.HasIndex("ID_Following");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.MyBooks", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ID_Acc")
                        .HasColumnType("integer");

                    b.Property<int>("ID_Book")
                        .HasColumnType("integer");

                    b.Property<int>("StatusBook")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ID_Acc");

                    b.HasIndex("ID_Book");

                    b.ToTable("myBooks");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.MyTags", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ID_Acc")
                        .HasColumnType("integer");

                    b.Property<int>("ID_Tag")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ID_Acc");

                    b.HasIndex("ID_Tag");

                    b.ToTable("myTags");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Propose", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("ID_Acc_Request")
                        .HasColumnType("integer");

                    b.Property<int?>("ID_Aut")
                        .HasColumnType("integer");

                    b.Property<int?>("ID_Pub")
                        .HasColumnType("integer");

                    b.Property<string>("NewAut")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NewPub")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("bytea");

                    b.Property<int>("PublishedYear")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ID_Acc_Request");

                    b.HasIndex("ID_Aut");

                    b.HasIndex("ID_Pub");

                    b.ToTable("Proposes");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Propose_NewTag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ID_Propose")
                        .HasColumnType("integer");

                    b.Property<string>("nameNewTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ID_Propose");

                    b.ToTable("propose_NewTags");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Propose_Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ID_Propose")
                        .HasColumnType("integer");

                    b.Property<int>("ID_Tag")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ID_Propose");

                    b.HasIndex("ID_Tag");

                    b.ToTable("ProposeTags");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Publisher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("Telephone")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("ID");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ID_Acc")
                        .HasColumnType("integer");

                    b.Property<int>("ID_Book")
                        .HasColumnType("integer");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ID_Acc");

                    b.HasIndex("ID_Book");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.ReviewChildren", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ID_Acc")
                        .HasColumnType("integer");

                    b.Property<int>("Id_parent")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ID_Acc");

                    b.HasIndex("Id_parent");

                    b.ToTable("reviewChildrens");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Account", b =>
                {
                    b.HasOne("ReviewBook.API.Data.Entities.Role", "role")
                        .WithMany("Accounts")
                        .HasForeignKey("ID_Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Book", b =>
                {
                    b.HasOne("ReviewBook.API.Data.Entities.Author", "author")
                        .WithMany("Books")
                        .HasForeignKey("ID_Aut")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewBook.API.Data.Entities.Publisher", "publisher")
                        .WithMany("Books")
                        .HasForeignKey("ID_Pub")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");

                    b.Navigation("publisher");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Book_Tag", b =>
                {
                    b.HasOne("ReviewBook.API.Data.Entities.Book", "book")
                        .WithMany("Tags")
                        .HasForeignKey("ID_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewBook.API.Data.Entities.Tag", "tag")
                        .WithMany("Books")
                        .HasForeignKey("ID_Tag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Follow", b =>
                {
                    b.HasOne("ReviewBook.API.Data.Entities.Account", "Follower")
                        .WithMany("myFollowings")
                        .HasForeignKey("ID_Follower")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ReviewBook.API.Data.Entities.Account", "Following")
                        .WithMany("myFollowers")
                        .HasForeignKey("ID_Following")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.MyBooks", b =>
                {
                    b.HasOne("ReviewBook.API.Data.Entities.Account", "Acc")
                        .WithMany("myBooks")
                        .HasForeignKey("ID_Acc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewBook.API.Data.Entities.Book", "book")
                        .WithMany("Accounts")
                        .HasForeignKey("ID_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acc");

                    b.Navigation("book");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.MyTags", b =>
                {
                    b.HasOne("ReviewBook.API.Data.Entities.Account", "Account")
                        .WithMany("myTags")
                        .HasForeignKey("ID_Acc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewBook.API.Data.Entities.Tag", "Tag")
                        .WithMany("myTags")
                        .HasForeignKey("ID_Tag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Propose", b =>
                {
                    b.HasOne("ReviewBook.API.Data.Entities.Account", "AccountRequest")
                        .WithMany("Proposes")
                        .HasForeignKey("ID_Acc_Request")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewBook.API.Data.Entities.Author", "Author")
                        .WithMany("Proposes")
                        .HasForeignKey("ID_Aut");

                    b.HasOne("ReviewBook.API.Data.Entities.Publisher", "Publisher")
                        .WithMany("Proposes")
                        .HasForeignKey("ID_Pub");

                    b.Navigation("AccountRequest");

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Propose_NewTag", b =>
                {
                    b.HasOne("ReviewBook.API.Data.Entities.Propose", "Propose")
                        .WithMany("newTags")
                        .HasForeignKey("ID_Propose")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propose");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Propose_Tag", b =>
                {
                    b.HasOne("ReviewBook.API.Data.Entities.Propose", "propose")
                        .WithMany("Tags")
                        .HasForeignKey("ID_Propose")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewBook.API.Data.Entities.Tag", "tag")
                        .WithMany("Proposes")
                        .HasForeignKey("ID_Tag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("propose");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Review", b =>
                {
                    b.HasOne("ReviewBook.API.Data.Entities.Account", "Account")
                        .WithMany("reviews")
                        .HasForeignKey("ID_Acc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewBook.API.Data.Entities.Book", "Book")
                        .WithMany("reviews")
                        .HasForeignKey("ID_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.ReviewChildren", b =>
                {
                    b.HasOne("ReviewBook.API.Data.Entities.Account", "Account")
                        .WithMany("ReviewChildrens")
                        .HasForeignKey("ID_Acc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewBook.API.Data.Entities.Review", "ReviewParent")
                        .WithMany("reviewChildrens")
                        .HasForeignKey("Id_parent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ReviewParent");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Account", b =>
                {
                    b.Navigation("Proposes");

                    b.Navigation("ReviewChildrens");

                    b.Navigation("myBooks");

                    b.Navigation("myFollowers");

                    b.Navigation("myFollowings");

                    b.Navigation("myTags");

                    b.Navigation("reviews");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Author", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Proposes");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Book", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Tags");

                    b.Navigation("reviews");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Propose", b =>
                {
                    b.Navigation("Tags");

                    b.Navigation("newTags");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Publisher", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Proposes");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Review", b =>
                {
                    b.Navigation("reviewChildrens");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("ReviewBook.API.Data.Entities.Tag", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Proposes");

                    b.Navigation("myTags");
                });
#pragma warning restore 612, 618
        }
    }
}
